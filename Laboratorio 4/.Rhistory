data$Antivirals <- droplevels(data$Antivirals)
data$Fatigue <- as.factor(data$Fatigue)
data$Fatigue <- droplevels(data$Fatigue)
data$Malaise <- as.factor(data$Malaise)
data$Malaise <- droplevels(data$Malaise)
data$Anorexia <- as.factor(data$Anorexia)
data$Anorexia <- droplevels(data$Anorexia)
data$Liver_Big <- as.factor(data$Liver_Big)
data$Liver_Big <- droplevels(data$Liver_Big)
data$Liver_Firm <- as.factor(data$Liver_Firm)
data$Liver_Firm <- droplevels(data$Liver_Firm)
data$Spleen_Palpable <- as.factor(data$Spleen_Palpable)
data$Spleen_Palpable <- droplevels(data$Spleen_Palpable)
data$Spiders <- as.factor(data$Spiders)
data$Spiders <- droplevels(data$Spiders)
data$Ascites <- as.factor(data$Ascites)
data$Ascites <- droplevels(data$Ascites)
data$Varices <- as.factor(data$Varices)
data$Varices <- droplevels(data$Varices)
data$Bilirubin <- as.numeric(data$Bilirubin)
data$Alk_Phosphate <- as.integer(data$Alk_Phosphate)
data$Sgot <- as.numeric(data$Sgot)
data$Albumin <- as.numeric(data$Albumin)
data$Histology <- as.factor(data$Histology)
data$Histology <- droplevels(data$Histology)
levels(data$Class) <- c("Muerto", "Vivo")
data$Class <- droplevels(data$Class)
levels(data$Sex) <- c("Hombre", "Mujer")
data$Sex <- droplevels(data$Sex)
levels(data$Steroid) <- c("Yes_Steroid", "No_Steroid")
data$Steroid <- droplevels(data$Steroid)
levels(data$Antivirals) <- c("Yes_Antivirals", "No_Antivirals")
data$Antivirals <- droplevels(data$Antivirals)
levels(data$Fatigue) <- c("Yes_Fatigue", "No_Fatigue")
data$Fatigue <- droplevels(data$Fatigue)
levels(data$Malaise) <- c("Yes_Malaise", "No_Malaise")
data$Malaise <- droplevels(data$Malaise)
levels(data$Anorexia) <- c("Yes_Anorexia", "No_Anorexia")
data$Anorexia <- droplevels(data$Anorexia)
levels(data$Liver_Big) <- c("Yes_Liver_Big", "No_Liver_Big")
data$Liver_Big <- droplevels(data$Liver_Big)
levels(data$Liver_Firm) <- c("Yes_Liver_Firm", "No_Liver_Firm")
data$Liver_Firm <- droplevels(data$Liver_Firm)
levels(data$Spleen_Palpable) <- c("Yes_Spleen_Palpable", "No_Spleen_Palpable")
data$Spleen_Palpable <- droplevels(data$Spleen_Palpable)
levels(data$Spiders) <- c("Yes_Spiders", "No_Spiders")
data$Spiders <- droplevels(data$Spiders)
levels(data$Ascites) <- c("Yes_Ascites", "No_Ascites")
data$Ascites <- droplevels(data$Ascites)
levels(data$Varices) <- c("Yes_Varices", "No_Varices")
data$Varices <- droplevels(data$Varices)
levels(data$Histology) <- c("Yes_Histology", "No_Histology")
data$Histology <- droplevels(data$Histology)
# Pre procesamiento ----
# Obtener qué paciente posee la mayor cantidad de atributos sin documentar
missing_values_per_patient <- rowSums(is.na(data))
missing_values_per_patient <- data.frame(missing_values = missing_values_per_patient) %>%
mutate(id = seq(nrow(data))) %>%arrange(desc(missing_values))
# Obtener top 10 pacientes con más valores NA
ids_patient_top_ten_missing_Values <- missing_values_per_patient$id[1:10]
#Eliminar variable Protime, dado que contiene 43% de valores NA.
data$Protime <- NULL
# Eliminar top 10 filas con m+as valores NA's
data$id <- seq(1:155)
data <- data[!(data$id %in% ids_patient_top_ten_missing_Values), ]
data$id <-NULL
# Obtener la moda de una determinada columna
getmode <- function(v){
v=v[nchar(as.character(v))>0]
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Impute Missing Data
for (cols in colnames(data)) {
if (cols %in% names(data[,sapply(data, is.numeric)])) {
data<-data%>%mutate(!!cols := replace(!!rlang::sym(cols), is.na(!!rlang::sym(cols)), mean(!!rlang::sym(cols), na.rm=TRUE)))
}
else {
data<-data%>%mutate(!!cols := replace(!!rlang::sym(cols), is.na(!!rlang::sym(cols)), getmode(!!rlang::sym(cols))))
}
}
#Data
data.tree <- data
#Datos de prueba
set.seed(111)
training <- createDataPartition(data.tree$Class,p=0.7)$Resample1
training.set <- data.tree[training,]
test.set <- data.tree[-training,]
#Arbol de decision
tree = C5.0(training.set[-1], training.set$Class)
tree.rules <- C5.0(x=training.set[,-1],y=training.set$Class,rules=T)
tree.pred.class <- predict(tree, test.set[,-1],type="class")
tree.pred.prob <- predict(tree,test.set[,-1],type="prob")
#Graficar arbol de decision
C5.0.graphviz <- function( C5.0.model, filename, fontname ='Arial',col.draw ='black',
col.font ='blue',col.conclusion ='lightpink',col.question = 'grey78',
shape.conclusion ='box3d',shape.question ='diamond',
bool.substitute = 'None', prefix=FALSE, vertical=TRUE ) {
library(hmisc)
library(stringr)
treeout <- C5.0.model$output
treeout<- substr(treeout, cpos(treeout, 'Decision tree:', start=1)+14,nchar(treeout))
treeout<- substr(treeout, 1,cpos(treeout, 'Evaluation on training data', start=1)-2)
variables <- data.frame(matrix(nrow=500, ncol=4))
names(variables) <- c('SYMBOL','TOKEN', 'TYPE' , 'QUERY')
connectors <- data.frame(matrix(nrow=500, ncol=3))
names(connectors) <- c('TOKEN', 'START','END')
theStack <- data.frame(matrix(nrow=500, ncol=1))
names(theStack) <- c('ITEM')
theStackIndex <- 1
currentvar <- 1
currentcon <- 1
open_connection <- TRUE
previousindent <- -1
firstindent <- 4
substitutes <- data.frame(None=c('= 0','= 1'), yesno=c('no','yes'),
truefalse=c('false', 'true'),TF=c('F','T'))
dtreestring<-unlist( scan(text= treeout,   sep='\n', what =list('character')))
for (linecount in c(1:length(dtreestring))) {
lineindent<-0
shortstring <- str_trim(dtreestring[linecount], side='left')
leadingspaces <- nchar(dtreestring[linecount]) - nchar(shortstring)
lineindent <- leadingspaces/4
dtreestring[linecount]<-str_trim(dtreestring[linecount], side='left')
while (!is.na(cpos(dtreestring[linecount], ':   ', start=1)) ) {
lineindent<-lineindent + 1
dtreestring[linecount]<-substr(dtreestring[linecount],
ifelse(is.na(cpos(dtreestring[linecount], ':   ', start=1)), 1,
cpos(dtreestring[linecount], ':   ', start=1)+4),
nchar(dtreestring[linecount]) )
shortstring <- str_trim(dtreestring[linecount], side='left')
leadingspaces <- nchar(dtreestring[linecount]) - nchar(shortstring)
lineindent <- lineindent + leadingspaces/4
dtreestring[linecount]<-str_trim(dtreestring[linecount], side='left')
}
if (!is.na(cpos(dtreestring[linecount], ':...', start=1)))
lineindent<- lineindent +  1
dtreestring[linecount]<-substr(dtreestring[linecount],
ifelse(is.na(cpos(dtreestring[linecount], ':...', start=1)), 1,
cpos(dtreestring[linecount], ':...', start=1)+4),
nchar(dtreestring[linecount]) )
dtreestring[linecount]<-str_trim(dtreestring[linecount])
stringlist <- strsplit(dtreestring[linecount],'\\:')
stringpart <- strsplit(unlist(stringlist)[1],'\\s')
if (open_connection==TRUE) {
variables[currentvar,'TOKEN'] <- unlist(stringpart)[1]
variables[currentvar,'SYMBOL'] <- paste('node',as.character(currentvar), sep='')
variables[currentvar,'TYPE'] <- shape.question
variables[currentvar,'QUERY'] <- 1
theStack[theStackIndex,'ITEM']<-variables[currentvar,'SYMBOL']
theStack[theStackIndex,'INDENT'] <-firstindent
theStackIndex<-theStackIndex+1
currentvar <- currentvar + 1
if(currentvar>2) {
connectors[currentcon - 1,'END'] <- variables[currentvar - 1, 'SYMBOL']
}
}
connectors[currentcon,'TOKEN'] <- paste(unlist(stringpart)[2],unlist(stringpart)[3])
if (connectors[currentcon,'TOKEN']=='= 0')
connectors[currentcon,'TOKEN'] <- as.character(substitutes[1,bool.substitute])
if (connectors[currentcon,'TOKEN']=='= 1')
connectors[currentcon,'TOKEN'] <- as.character(substitutes[2,bool.substitute])
if (open_connection==TRUE) {
if (lineindent<previousindent) {
theStackIndex <- theStackIndex-(( previousindent- lineindent)  +1 )
currentsymbol <-theStack[theStackIndex,'ITEM']
} else
currentsymbol <-variables[currentvar - 1,'SYMBOL']
} else {
currentsymbol <-theStack[theStackIndex-((previousindent -lineindent ) +1    ),'ITEM']
theStackIndex <- theStackIndex-(( previousindent- lineindent)    )
}
connectors[currentcon, 'START'] <- currentsymbol
currentcon <- currentcon + 1
open_connection <- TRUE
if (length(unlist(stringlist))==2) {
stringpart2 <- strsplit(unlist(stringlist)[2],'\\s')
variables[currentvar,'TOKEN']  <- paste(ifelse((prefix==FALSE),'','Class'), unlist(stringpart2)[2])
variables[currentvar,'SYMBOL']  <- paste('node',as.character(currentvar), sep='')
variables[currentvar,'TYPE']   <- shape.conclusion
variables[currentvar,'QUERY']  <- 0
currentvar <- currentvar + 1
connectors[currentcon - 1,'END'] <- variables[currentvar - 1,'SYMBOL']
open_connection <- FALSE
}
previousindent<-lineindent
}
runningstring <- paste('digraph g {', 'graph ', sep='\n')
runningstring <- paste(runningstring, ' [rankdir="', sep='')
runningstring <- paste(runningstring, ifelse(vertical==TRUE,'TB','LR'), sep='' )
runningstring <- paste(runningstring, '"]', sep='')
for (lines in c(1:(currentvar-1))) {
runningline <- paste(variables[lines,'SYMBOL'], '[shape="')
runningline <- paste(runningline,variables[lines,'TYPE'], sep='' )
runningline <- paste(runningline,'" label ="', sep='' )
runningline <- paste(runningline,variables[lines,'TOKEN'], sep='' )
runningline <- paste(runningline,
'" style=filled fontcolor=', sep='')
runningline <- paste(runningline, col.font)
runningline <- paste(runningline,' color=' )
runningline <- paste(runningline, col.draw)
runningline <- paste(runningline,' fontname=')
runningline <- paste(runningline, fontname)
runningline <- paste(runningline,' fillcolor=')
runningline <- paste(runningline,
ifelse(variables[lines,'QUERY']== 0 ,col.conclusion,col.question))
runningline <- paste(runningline,'];')
runningstring <- paste(runningstring, runningline , sep='\n')
}
for (lines in c(1:(currentcon-1)))  {
runningline <- paste (connectors[lines,'START'], '->')
runningline <- paste (runningline, connectors[lines,'END'])
runningline <- paste (runningline,'[label="')
runningline <- paste (runningline,connectors[lines,'TOKEN'], sep='')
runningline <- paste (runningline,'" fontname=', sep='')
runningline <- paste (runningline, fontname)
runningline <- paste (runningline,'];')
runningstring <- paste(runningstring, runningline , sep='\n')
}
runningstring <- paste(runningstring,'}')
cat(runningstring)
sink(filename, split=TRUE)
cat(runningstring)
sink()
}
C5.0.graphviz(tree, './mydotfile.txt')
install.packages(hmisc)
install.packages("hmisc")
install.packages("cwhmisc")
source("C:/Users/Ariel/Desktop/Universidad/Analisis-de-Datos-Lab-2-2022/Laboratorio 4/Laboratorio-4.R", encoding = 'ISO-8859-1', echo=TRUE)
install.packages("cwhmisc")
install.packages("cwhmisc")
install.packages("cwhmisc", dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('cwhmisc',repos='http://cran.us.r-project.org')
plot(tree)
source("C:/Users/Ariel/Desktop/Universidad/Analisis-de-Datos-Lab-2-2022/Laboratorio 4/Laboratorio-4.R", encoding = 'ISO-8859-1', echo=TRUE)
plot(tree)
# Cargar librerias ----
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(dplyr)
library("C50")
library("caret")
library(partykit)
# Leer data set de Hepatitis. -----
data <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/hepatitis/hepatitis.data", fileEncoding = "UTF-8", sep = ",")
# Asignar nombres mas representativos a las variables de acuerdo al archivo hepatitis.name.
names(data) <- c('Class', 'Age', 'Sex', 'Steroid', 'Antivirals', 'Fatigue', 'Malaise', 'Anorexia', 'Liver_Big', 'Liver_Firm', 'Spleen_Palpable',
'Spiders', 'Ascites', 'Varices', 'Bilirubin', 'Alk_Phosphate', 'Sgot', 'Albumin', 'Protime', 'Histology')
#Convertir '?' a NAs
data <- data %>% mutate_all(~na_if(., "?"))
# Cargar librerias ----
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(dplyr)
library("C50")
library("caret")
library(partykit)
# Leer data set de Hepatitis. -----
data <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/hepatitis/hepatitis.data", fileEncoding = "UTF-8", sep = ",")
# Asignar nombres mas representativos a las variables de acuerdo al archivo hepatitis.name.
names(data) <- c('Class', 'Age', 'Sex', 'Steroid', 'Antivirals', 'Fatigue', 'Malaise', 'Anorexia', 'Liver_Big', 'Liver_Firm', 'Spleen_Palpable',
'Spiders', 'Ascites', 'Varices', 'Bilirubin', 'Alk_Phosphate', 'Sgot', 'Albumin', 'Protime', 'Histology')
#Convertir '?' a NAs
data <- data %>% mutate_all(~na_if(., "?"))
str(data)
data$Class <- factor(ifelse(data$Class==1,'Muerto','Vivo'))
str(data)
# Cargar librerias ----
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(dplyr)
library("C50")
library("caret")
library(partykit)
# Leer data set de Hepatitis. -----
data <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/hepatitis/hepatitis.data", fileEncoding = "UTF-8", sep = ",")
# Asignar nombres mas representativos a las variables de acuerdo al archivo hepatitis.name.
names(data) <- c('Class', 'Age', 'Sex', 'Steroid', 'Antivirals', 'Fatigue', 'Malaise', 'Anorexia', 'Liver_Big', 'Liver_Firm', 'Spleen_Palpable',
'Spiders', 'Ascites', 'Varices', 'Bilirubin', 'Alk_Phosphate', 'Sgot', 'Albumin', 'Protime', 'Histology')
#Convertir '?' a NAs
data <- data %>% mutate_all(~na_if(., "?"))
# Asignar nombres descriptivos a los niveles de las variables categoricas
# Convertir las columnas a los formatos correctos ----
data$Class <- factor(ifelse(data$Class==1,'Muerto','Vivo'))
data$Age <- as.numeric(data$Age)
data$Sex <- factor(ifelse(data$Age==1, 'Hombre','Mujer'))
data$Steroid <- factor(ifelse(data$Steroid==1,'Yes_Steroid','No_Steroid'))
data$Antivirals <- factor(ifelse(data$Antivirals==1,'Yes_Antivirals','No_Antivirals'))
data$Fatigue <- factor(ifelse(data$Fatigue==1,'Yes_Fatigue','No_Fatigue'))
data$Malaise <- factor(ifelse(data$Malaise==1,'Yes_Malaise','No_Malaise'))
data$Anorexia <- factor(ifelse(data$Anorexia==1,'Yes_Anorexia','No_Anorexia'))
data$Liver_Big <- factor(ifelse(data$Liver_Big==1,'Yes_Liver_Big','No_Liver_Big'))
data$Liver_Firm <- factor(ifelse(data$Liver_Firm==1,'Yes_Liver_Firm','No_Liver_Firm'))
data$Spleen_Palpable <- factor(ifelse(data$Spleen_Palpable==1,'Yes_Spleen_Palpable','No_Spleen_Palpable'))
data$Spiders <- factor(ifelse(data$Spiders==1,'Yes_Spiders','No_Spiders'))
data$Ascites <- factor(ifelse(data$Ascites==1,'Yes_Ascites','No_Ascites'))
data$Varices <- factor(ifelse(data$Varices==1,'Yes_Varices','No_Varices'))
data$Bilirubin <- as.numeric(data$Bilirubin)
data$Alk_Phosphate <- as.integer(data$Alk_Phosphate)
data$Sgot <- as.numeric(data$Sgot)
data$Albumin <- as.numeric(data$Albumin)
data$Histology <- factor(ifelse(data$Histology==1,'Yes_Histology','No_Histology'))
str(data)
# Pre procesamiento ----
# Obtener qué paciente posee la mayor cantidad de atributos sin documentar
missing_values_per_patient <- rowSums(is.na(data))
missing_values_per_patient <- data.frame(missing_values = missing_values_per_patient) %>%
mutate(id = seq(nrow(data))) %>%arrange(desc(missing_values))
# Obtener top 10 pacientes con más valores NA
ids_patient_top_ten_missing_Values <- missing_values_per_patient$id[1:10]
#Eliminar variable Protime, dado que contiene 43% de valores NA.
data$Protime <- NULL
# Eliminar top 10 filas con m+as valores NA's
data$id <- seq(1:155)
data <- data[!(data$id %in% ids_patient_top_ten_missing_Values), ]
data$id <-NULL
# Obtener la moda de una determinada columna
getmode <- function(v){
v=v[nchar(as.character(v))>0]
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Impute Missing Data
for (cols in colnames(data)) {
if (cols %in% names(data[,sapply(data, is.numeric)])) {
data<-data%>%mutate(!!cols := replace(!!rlang::sym(cols), is.na(!!rlang::sym(cols)), mean(!!rlang::sym(cols), na.rm=TRUE)))
}
else {
data<-data%>%mutate(!!cols := replace(!!rlang::sym(cols), is.na(!!rlang::sym(cols)), getmode(!!rlang::sym(cols))))
}
}
View(data)
data.tree <- data
#Datos de prueba
set.seed(111)
training <- createDataPartition(data.tree$Class,p=0.7)$Resample1
training.set <- data.tree[training,]
test.set <- data.tree[-training,]
summary(tree.rules)
tree = C5.0(training.set[-1], training.set$Class)
tree.rules <- C5.0(x=training.set[,-1],y=training.set$Class,rules=T)
tree.pred.class <- predict(tree, test.set[,-1],type="class")
tree = C5.0(training.set[-1], training.set$Class)
View(training.set)
str(training.set)
set.seed(112)
training <- createDataPartition(data.tree$Class,p=0.7)$Resample1
training.set <- data.tree[training,]
test.set <- data.tree[-training,]
str(training.set)
View(data.tree)
data$Sex <- factor(ifelse(data$Sex==1, 'Hombre','Mujer'))
set.seed(111)
training <- createDataPartition(data.tree$Class,p=0.7)$Resample1
training.set <- data.tree[training,]
test.set <- data.tree[-training,]
str(training.set)
# Cargar librerias ----
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(dplyr)
library("C50")
library("caret")
library(partykit)
# Leer data set de Hepatitis. -----
data <- read.table("https://archive.ics.uci.edu/ml/machine-learning-databases/hepatitis/hepatitis.data", fileEncoding = "UTF-8", sep = ",")
# Asignar nombres mas representativos a las variables de acuerdo al archivo hepatitis.name.
names(data) <- c('Class', 'Age', 'Sex', 'Steroid', 'Antivirals', 'Fatigue', 'Malaise', 'Anorexia', 'Liver_Big', 'Liver_Firm', 'Spleen_Palpable',
'Spiders', 'Ascites', 'Varices', 'Bilirubin', 'Alk_Phosphate', 'Sgot', 'Albumin', 'Protime', 'Histology')
#Convertir '?' a NAs
data <- data %>% mutate_all(~na_if(., "?"))
# Asignar nombres descriptivos a los niveles de las variables categoricas
# Convertir las columnas a los formatos correctos ----
data$Class <- factor(ifelse(data$Class==1,'Muerto','Vivo'))
data$Age <- as.numeric(data$Age)
data$Sex <- factor(ifelse(data$Sex==1, 'Hombre','Mujer'))
data$Steroid <- factor(ifelse(data$Steroid==1,'Yes_Steroid','No_Steroid'))
data$Antivirals <- factor(ifelse(data$Antivirals==1,'Yes_Antivirals','No_Antivirals'))
data$Fatigue <- factor(ifelse(data$Fatigue==1,'Yes_Fatigue','No_Fatigue'))
data$Malaise <- factor(ifelse(data$Malaise==1,'Yes_Malaise','No_Malaise'))
data$Anorexia <- factor(ifelse(data$Anorexia==1,'Yes_Anorexia','No_Anorexia'))
data$Liver_Big <- factor(ifelse(data$Liver_Big==1,'Yes_Liver_Big','No_Liver_Big'))
data$Liver_Firm <- factor(ifelse(data$Liver_Firm==1,'Yes_Liver_Firm','No_Liver_Firm'))
data$Spleen_Palpable <- factor(ifelse(data$Spleen_Palpable==1,'Yes_Spleen_Palpable','No_Spleen_Palpable'))
data$Spiders <- factor(ifelse(data$Spiders==1,'Yes_Spiders','No_Spiders'))
data$Ascites <- factor(ifelse(data$Ascites==1,'Yes_Ascites','No_Ascites'))
data$Varices <- factor(ifelse(data$Varices==1,'Yes_Varices','No_Varices'))
data$Bilirubin <- as.numeric(data$Bilirubin)
data$Alk_Phosphate <- as.integer(data$Alk_Phosphate)
data$Sgot <- as.numeric(data$Sgot)
data$Albumin <- as.numeric(data$Albumin)
data$Histology <- factor(ifelse(data$Histology==1,'Yes_Histology','No_Histology'))
# Pre procesamiento ----
# Obtener qué paciente posee la mayor cantidad de atributos sin documentar
missing_values_per_patient <- rowSums(is.na(data))
missing_values_per_patient <- data.frame(missing_values = missing_values_per_patient) %>%
mutate(id = seq(nrow(data))) %>%arrange(desc(missing_values))
# Obtener top 10 pacientes con más valores NA
ids_patient_top_ten_missing_Values <- missing_values_per_patient$id[1:10]
#Eliminar variable Protime, dado que contiene 43% de valores NA.
data$Protime <- NULL
# Eliminar top 10 filas con m+as valores NA's
data$id <- seq(1:155)
data <- data[!(data$id %in% ids_patient_top_ten_missing_Values), ]
data$id <-NULL
# Obtener la moda de una determinada columna
getmode <- function(v){
v=v[nchar(as.character(v))>0]
uniqv <- unique(v)
uniqv[which.max(tabulate(match(v, uniqv)))]
}
# Impute Missing Data
for (cols in colnames(data)) {
if (cols %in% names(data[,sapply(data, is.numeric)])) {
data<-data%>%mutate(!!cols := replace(!!rlang::sym(cols), is.na(!!rlang::sym(cols)), mean(!!rlang::sym(cols), na.rm=TRUE)))
}
else {
data<-data%>%mutate(!!cols := replace(!!rlang::sym(cols), is.na(!!rlang::sym(cols)), getmode(!!rlang::sym(cols))))
}
}
#Data
data.tree <- data
set.seed(111)
training <- createDataPartition(data.tree$Class,p=0.7)$Resample1
training.set <- data.tree[training,]
test.set <- data.tree[-training,]
str(training.set)
tree = C5.0(training.set[-1], training.set$Class)
tree.rules <- C5.0(x=training.set[,-1],y=training.set$Class,rules=T)
summary(tree.rules)
tree.pred.class <- predict(tree, test.set[,-1],type="class")
tree.pred.prob <- predict(tree,test.set[,-1],type="prob")
conf.matrix.tree <- confusionMatrix(table(test.set$Class,tree.pred.class))
print(conf.matrix.tree)
plot(tree)
plot(tree$tree)
plot(tree$call)
tree$call
plot(tree$output)
tree$tree
View(data.tree)
summary(tree.rules)
conf.matrix.tree <- confusionMatrix(table(test.set$Class,tree.pred.class))
print(conf.matrix.tree)
summary(tree)
summary(tree.rules)
conf.matrix.tree <- confusionMatrix(table(test.set$Class,tree.pred.class))
print(conf.matrix.tree)
plot(tree)
summary(tree)
tree = C5.0(training.set[-1], training.set$Class, trials = 5)
tree.rules <- C5.0(x=training.set[,-1],y=training.set$Class,rules=T)
tree.pred.class <- predict(tree, test.set[,-1],type="class")
tree.pred.prob <- predict(tree,test.set[,-1],type="prob")
plot(tree)
conf.matrix.tree <- confusionMatrix(table(test.set$Class,tree.pred.class))
print(conf.matrix.tree)
set.seed(111)
training <- createDataPartition(data.tree$Class,p=0.7)$Resample1
training.set <- data.tree[training,]
test.set <- data.tree[-training,]
#Arbol de decision
tree = C5.0(training.set[-1], training.set$Class, trials = 10)
tree.rules <- C5.0(x=training.set[,-1],y=training.set$Class,rules=T)
tree.pred.class <- predict(tree, test.set[,-1],type="class")
tree.pred.prob <- predict(tree,test.set[,-1],type="prob")
#Graficar arbol de decision
#Matriz de confusion
conf.matrix.tree <- confusionMatrix(table(test.set$Class,tree.pred.class))
print(conf.matrix.tree)
set.seed(111)
training <- createDataPartition(data.tree$Class,p=0.7)$Resample1
training.set <- data.tree[training,]
test.set <- data.tree[-training,]
#Arbol de decision
tree = C5.0(training.set[-1], training.set$Class, trials = 100)
tree.rules <- C5.0(x=training.set[,-1],y=training.set$Class,rules=T)
tree.pred.class <- predict(tree, test.set[,-1],type="class")
tree.pred.prob <- predict(tree,test.set[,-1],type="prob")
#Graficar arbol de decision
#Matriz de confusion
conf.matrix.tree <- confusionMatrix(table(test.set$Class,tree.pred.class))
print(conf.matrix.tree)
set.seed(111)
training <- createDataPartition(data.tree$Class,p=0.7)$Resample1
training.set <- data.tree[training,]
test.set <- data.tree[-training,]
#Arbol de decision
tree = C5.0(training.set[-1], training.set$Class, trials = 100)
tree.rules <- C5.0(x=training.set[,-1],y=training.set$Class,rules=T)
tree.pred.class <- predict(tree, test.set[,-1],type="class")
tree.pred.prob <- predict(tree,test.set[,-1],type="prob")
#Graficar arbol de decision
#Matriz de confusion
conf.matrix.tree <- confusionMatrix(table(test.set$Class,tree.pred.class))
print(conf.matrix.tree)
summary(tree)
source("C:/Users/Ariel/Desktop/Universidad/Analisis-de-Datos-Lab-2-2022/Laboratorio 4/Laboratorio-4.R", encoding = 'ISO-8859-1', echo=TRUE)
summary(tree)
# Cargar librerias ----
library(tidyverse)
library(ggplot2)
library(ggpubr)
library(dplyr)
library("C50")
library("caret")
source("C:/Users/Ariel/Desktop/Universidad/Analisis-de-Datos-Lab-2-2022/Laboratorio 4/Laboratorio-4.R", encoding = 'ISO-8859-1', echo=TRUE)
